# Generated by Django 4.1.6 on 2023-02-14 09:44

import blog.custom_field
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('blog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', blog.custom_field.UnsignedAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', help_text='태그명. url로 사용되므로, 소문자 + _ 로 구성되어야 한다.', max_length=255, unique=True, verbose_name='태그명')),
                ('slug', models.SlugField(default='', max_length=255, unique=True)),
                ('page_title', models.CharField(blank=True, default='', help_text="페이지 상단에 노출될 태그 페이지의 제목. 없을 시 '태그명'이 표시됨.", max_length=255, verbose_name='태그페이지 제목')),
                ('description', models.CharField(blank=True, default='', max_length=255, verbose_name='태그에 대한 요약 설명')),
                ('count', models.IntegerField(default=0, editable=False, verbose_name='게시글 수')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='TagArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.article')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tag_manager.tag')),
            ],
            options={
                'db_table': 'tag_article_rel',
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='articles',
            field=models.ManyToManyField(related_name='tags', through='tag_manager.TagArticle', to='blog.article'),
        ),
    ]
